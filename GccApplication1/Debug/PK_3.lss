
PK_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000738  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000575  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030d  00000000  00000000  00000e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	3d d0       	rcall	.+122    	; 0xae <main>
  34:	45 c0       	rjmp	.+138    	; 0xc0 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z4initv>:
void ledOff();
void ledRed();
void ledYellow();

void init(){
	DDRB = 0b11111111;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b00000000;
  3c:	14 ba       	out	0x14, r1	; 20
	
	PORTC = 0xFF;
  3e:	85 bb       	out	0x15, r24	; 21
  40:	08 95       	ret

00000042 <_Z6ledOffv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  42:	8f e4       	ldi	r24, 0x4F	; 79
  44:	93 ec       	ldi	r25, 0xC3	; 195
  46:	01 97       	sbiw	r24, 0x01	; 1
  48:	f1 f7       	brne	.-4      	; 0x46 <_Z6ledOffv+0x4>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_Z6ledOffv+0xa>
  4c:	00 00       	nop
}

void ledOff(){
	while(1){
		_delay_ms(200);
		if(~PINC & 0x01){
  4e:	98 9b       	sbis	0x13, 0	; 19
			ledRed();
  50:	04 d0       	rcall	.+8      	; 0x5a <_Z6ledRedv>
		}
		if(~PINC & 0x02){
  52:	99 99       	sbic	0x13, 1	; 19
  54:	f6 cf       	rjmp	.-20     	; 0x42 <_Z6ledOffv>
			ledYellow();
  56:	16 d0       	rcall	.+44     	; 0x84 <_Z9ledYellowv>
  58:	f4 cf       	rjmp	.-24     	; 0x42 <_Z6ledOffv>

0000005a <_Z6ledRedv>:
	PORTC = 0xFF;
}

void ledRed(){
	while(1){
		PORTB = (1 << PB0);
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	88 bb       	out	0x18, r24	; 24
  5e:	ef e4       	ldi	r30, 0x4F	; 79
  60:	f3 ec       	ldi	r31, 0xC3	; 195
  62:	31 97       	sbiw	r30, 0x01	; 1
  64:	f1 f7       	brne	.-4      	; 0x62 <_Z6ledRedv+0x8>
  66:	00 c0       	rjmp	.+0      	; 0x68 <_Z6ledRedv+0xe>
  68:	00 00       	nop
		_delay_ms(200);
		PORTB = (0 << PB0);
  6a:	18 ba       	out	0x18, r1	; 24
  6c:	ef e4       	ldi	r30, 0x4F	; 79
  6e:	f3 ec       	ldi	r31, 0xC3	; 195
  70:	31 97       	sbiw	r30, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <_Z6ledRedv+0x16>
  74:	00 c0       	rjmp	.+0      	; 0x76 <_Z6ledRedv+0x1c>
  76:	00 00       	nop
		_delay_ms(200);
		if(~PINC & 0x02){
  78:	99 9b       	sbis	0x13, 1	; 19
  7a:	03 c0       	rjmp	.+6      	; 0x82 <_Z6ledRedv+0x28>
			break;
		}
		if(~PINC & 0x01){
  7c:	98 99       	sbic	0x13, 0	; 19
  7e:	ee cf       	rjmp	.-36     	; 0x5c <_Z6ledRedv+0x2>
			ledOff();
  80:	e0 df       	rcall	.-64     	; 0x42 <_Z6ledOffv>
  82:	08 95       	ret

00000084 <_Z9ledYellowv>:
	}
}

void ledYellow(){
	while(1){
		PORTB = (1 << PB1);
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	88 bb       	out	0x18, r24	; 24
  88:	ef e4       	ldi	r30, 0x4F	; 79
  8a:	f3 ec       	ldi	r31, 0xC3	; 195
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <_Z9ledYellowv+0x8>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_Z9ledYellowv+0xe>
  92:	00 00       	nop
		_delay_ms(200);
		PORTB = (0 << PB1);
  94:	18 ba       	out	0x18, r1	; 24
  96:	ef e4       	ldi	r30, 0x4F	; 79
  98:	f3 ec       	ldi	r31, 0xC3	; 195
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <_Z9ledYellowv+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_Z9ledYellowv+0x1c>
  a0:	00 00       	nop
		_delay_ms(200);
		if(~PINC & 0x01){
  a2:	98 9b       	sbis	0x13, 0	; 19
  a4:	03 c0       	rjmp	.+6      	; 0xac <_Z9ledYellowv+0x28>
			break;
		}
		if(~PINC & 0x02){
  a6:	99 99       	sbic	0x13, 1	; 19
  a8:	ee cf       	rjmp	.-36     	; 0x86 <_Z9ledYellowv+0x2>
			ledOff();
  aa:	cb df       	rcall	.-106    	; 0x42 <_Z6ledOffv>
  ac:	08 95       	ret

000000ae <main>:

int main(void)
{
    /* Replace with your application code */
	
	init();
  ae:	c4 df       	rcall	.-120    	; 0x38 <_Z4initv>
	
    while (1) 
    {
	
		if(~PINC & 0x01){
  b0:	98 99       	sbic	0x13, 0	; 19
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0xa>
			ledRed();
  b4:	d2 df       	rcall	.-92     	; 0x5a <_Z6ledRedv>
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <main+0x2>
		}
		else if(~PINC & 0x02){
  b8:	99 99       	sbic	0x13, 1	; 19
  ba:	fa cf       	rjmp	.-12     	; 0xb0 <main+0x2>
			ledYellow();
  bc:	e3 df       	rcall	.-58     	; 0x84 <_Z9ledYellowv>
  be:	f8 cf       	rjmp	.-16     	; 0xb0 <main+0x2>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
